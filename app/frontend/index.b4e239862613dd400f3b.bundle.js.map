{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/App/Traducir.tsx","webpack:///./src/index.tsx","webpack:///./src/history.ts","webpack:///./src/App/Components/Users.tsx","webpack:///./src/App/Components/SuggestionsTable.tsx","webpack:///./src/App/Components/Suggestions.tsx","webpack:///./src/App/Components/SuggestionNew.tsx","webpack:///./src/App/Components/Results.tsx","webpack:///./src/Models/UserInfo.ts","webpack:///./src/Models/SOStringSuggestion.ts","webpack:///./src/App/Components/StatsWithLinks.tsx","webpack:///./src/App/Components/Filters.tsx","webpack:///./src/Models/UserType.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","axios_1","_","React","react_router_dom_1","reactstrap_1","history_1","UserInfo_1","Filters_1","Results_1","StatsWithLinks_1","Suggestions_1","Users_1","withRouter","Component","[object Object]","props","super","this","state","isLoading","isOpen","strings","loadSuggestions","resultsReceived","refreshString","post","then","response","setState","user","catch","error","config","showErrorMessage","status","stats","stringMatch","location","pathname","match","currentString","returnUrl","encodeURIComponent","search","createElement","NavItem","NavLink","href","str","stringIdToUpdate","idx","findIndex","id","touched","newStrings","messageOrCode","alert","startsWith","Fragment","Navbar","color","dark","expand","className","Link","to","friendlyName","userTypeToString","userType","NavbarToggler","onClick","toggle","Collapse","navbar","Nav","target","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","renderLogInLogOut","Switch","Route","path","exact","render","currentUser","onResultsFetched","onLoading","q","results","Modal","onToggle","ModalHeader","ModalBody","ReactDOM","Traducir_1","Router","history","document","getElementById","6gJa","e","t","createBrowserHistory","UserType_1","users","refreshUsers","newType","put","UserId","UserType","map","u","key","siteDomain","displayName","isModerator","canManageUsers","role","User","type","updateUserType","TrustedUser","Banned","Reviewer","FWOS","__awaiter","Promise","a","next","throw","done","SOStringSuggestion_1","ReviewAction","Accept","Reject","isButtonDisabled","suggestions","sug","StringSuggestionState","ApprovedByTrustedUser","suggestion","lastStateUpdatedByName","lastStateUpdatedById","createdById","title","creationDate","createdByName","renderDeleteButton","renderSuggestionActions","canReview","processReview","disabled","action","Approve","SuggestionId","stringId","processDeleteReview","delete","FkmL","SuggestionNew_1","SuggestionsTable_1","rawString","onCheckboxChange","isUrgent","IsUrgent","StringId","canSuggest","updateUrgency","transifexPath","renderUrgency","checked","onChange","originalString","variant","replace","translation","SuggestionCreationResult","CreationOk","InvalidStringId","SuggestionEqualsOriginal","EmptySuggestion","SuggestionAlreadyThere","TooFewVariables","TooManyVariables","DatabaseError","approve","RawString","Suggestion","htmlFor","postSuggestion","H8RE","approved","filter","pending","Created","colSpan","goToString","renderSuggestions","renderRows","RBzv","ApprovedByReviewer","Rejected","DeletedByOwner","DismissedByOtherString","aria-label","totalStrings","urgentStrings","withoutTranslation","waitingApproval","waitingReview","aUEq","query_string_1","SuggestionsStatus","TranslationStatus","PushStatus","UrgencyStatus","AnyStatus","DoesNotHaveSuggestions","HasSuggestionsNeedingReview","HasSuggestionsNeedingApproval","HasSuggestionsNeedingReviewApprovedByTrustedUser","WithTranslation","WithoutTranslation","NeedsPush","DoesNotNeedPush","IsNotUrgent","submitForm","debounce","hasError","getStateFromLocation","hasFilter","sourceRegex","translationRegex","translationStatus","suggestionsStatus","pushStatus","urgencyStatus","nextProps","context","parts","parse","updatedState","assign","newPath","currentPath","stringify","pickBy","placeholder","handleField","parseInt","reset","Redirect","Unknown"],"mappings":"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","file":"index.b4e239862613dd400f3b.bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \t// script path function\n \tfunction jsonpScriptSrc(chunkId) {\n \t\treturn __webpack_require__.p + \"\" + ({}[chunkId]||chunkId) + \".\" + {}[chunkId] + \".bundle.js\"\n \t}\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"2YZa\",0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import axios, { AxiosError } from \"axios\";\nimport * as _ from \"lodash\";\nimport * as React from \"react\";\nimport { Link, Route, RouteComponentProps, Switch, withRouter } from \"react-router-dom\";\nimport {\n    Collapse, DropdownItem, DropdownMenu, DropdownToggle, Modal, ModalBody, ModalFooter,\n    ModalHeader, Nav, Navbar, NavbarBrand,\n    NavbarToggler, NavItem, NavLink, UncontrolledDropdown\n} from \"reactstrap\";\nimport history from \"../history\";\nimport IConfig from \"../Models/Config\";\nimport ISOString from \"../Models/SOString\";\nimport IStats from \"../Models/Stats\";\nimport IUserInfo, { userTypeToString } from \"../Models/UserInfo\";\nimport Filters from \"./Components/Filters\";\nimport Results from \"./Components/Results\";\nimport StatsWithLinks from \"./Components/StatsWithLinks\";\nimport Suggestions from \"./Components/Suggestions\";\nimport Users from \"./Components/Users\";\n\nexport interface ITraducirState {\n    user?: IUserInfo;\n    strings: ISOString[];\n    currentString?: ISOString;\n    config?: IConfig;\n    isOpen: boolean;\n    isLoading: boolean;\n    stats?: IStats;\n}\n\nclass Traducir extends React.Component<RouteComponentProps<{}>, ITraducirState> {\n    constructor(props: RouteComponentProps<{}>) {\n        super(props);\n\n        this.state = {\n            isLoading: false,\n            isOpen: false,\n            strings: []\n        };\n\n        this.loadSuggestions = this.loadSuggestions.bind(this);\n        this.resultsReceived = this.resultsReceived.bind(this);\n        this.refreshString = this.refreshString.bind(this);\n    }\n\n    public async componentDidMount() {\n        axios.post<IUserInfo>(\"/app/api/me\")\n            .then(response => this.setState({ user: response.data }))\n            .catch(error => this.setState({ user: undefined }));\n        axios.get<IConfig>(\"/app/api/config\")\n            .then(response => this.setState({ config: response.data }))\n            .catch(error => this.showErrorMessage(error.response.status));\n        axios.get<IStats>(\"/app/api/strings/stats\")\n            .then(response => this.setState({ stats: response.data }))\n            .catch(error => this.showErrorMessage(error.response.status));\n\n        const stringMatch = location.pathname.match(/^\\/string\\/([0-9]+)$/);\n        if (stringMatch) {\n            try {\n                const r = await axios.get<ISOString>(`/app/api/strings/${stringMatch[1]}`);\n                this.setState({\n                    currentString: r.data\n                });\n            } catch (error) {\n                this.showErrorMessage(error.response.status);\n            }\n        }\n    }\n\n    public renderLogInLogOut() {\n        const returnUrl = encodeURIComponent(location.pathname + location.search);\n        if (!this.state || !this.state.user) {\n            return <NavItem>\n                <NavLink href={`/app/login?returnUrl=${returnUrl}`}>Log in!</NavLink>\n            </NavItem>;\n        } else if (this.state.user) {\n            return <NavItem>\n                <NavLink href={`/app/logout?returnUrl=${returnUrl}`}>Log out</NavLink>\n            </NavItem>;\n        }\n    }\n\n    public loadSuggestions(str: ISOString) {\n        this.setState({\n            currentString: str\n        });\n    }\n\n    public async refreshString(stringIdToUpdate: number) {\n        const idx = _.findIndex(this.state.strings, s => s.id === stringIdToUpdate);\n        const r = await axios.get<ISOString>(`/app/api/strings/${stringIdToUpdate}`);\n        r.data.touched = true;\n\n        const newStrings = this.state.strings.slice();\n        newStrings[idx] = r.data;\n\n        this.setState({\n            currentString: r.data,\n            strings: newStrings\n        });\n\n        try {\n            const response = await axios.get<IStats>(\"/app/api/strings/stats\");\n            this.setState({ stats: response.data });\n        } catch (error) {\n            this.showErrorMessage(error.response.status);\n        }\n    }\n\n    public resultsReceived(strings: ISOString[]) {\n        this.setState({\n            isLoading: false,\n            strings\n        });\n    }\n\n    public showErrorMessage(messageOrCode: string | number) {\n        if (typeof (messageOrCode) === \"string\") {\n            alert(messageOrCode);\n        } else {\n            if (messageOrCode === 401) {\n                alert(\"Your session has expired... you will be redirected to the log in page\");\n                window.location.href = `/app/login?returnUrl=${encodeURIComponent(location.pathname + location.search)}`;\n            } else {\n                alert(`Unknown error. Code: ${messageOrCode}`);\n            }\n        }\n    }\n\n    public toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    public isOpen() {\n        return this.props.location.pathname.startsWith(\"/string/\");\n    }\n\n    public onToggle() {\n        history.push(\"/filters\");\n    }\n\n    public render() {\n        return <>\n            <Navbar color=\"dark\" dark expand=\"lg\" className=\"fixed-top\">\n                <div className=\"container\">\n                    <Link to=\"/\" className=\"navbar-brand d-none d-lg-block\">{this.state.config && this.state.config.friendlyName} Translations 🦄{this.state.user && ` ${this.state.user.name} (${userTypeToString(this.state.user.userType)})`}</Link>\n                    <Link to=\"/\" className=\"navbar-brand d-lg-none\">{this.state.config && this.state.config.friendlyName} Translations 🦄</Link>\n                    <NavbarToggler onClick={this.toggle} />\n                    <Collapse isOpen={this.state.isOpen} navbar>\n                        <Nav className=\"ml-auto\" navbar>\n                            <NavItem>\n                                <NavLink href=\"https://github.com/g3rv4/Traducir\" target=\"_blank\">Source Code</NavLink>\n                            </NavItem>\n                            <UncontrolledDropdown nav inNavbar>\n                                <DropdownToggle nav caret>\n                                    Database\n                                </DropdownToggle>\n                                <DropdownMenu right>\n                                    <DropdownItem>\n                                        <a href=\"https://db.traducir.win\" className=\"dropdown-item\" target=\"_blank\">Access the Database</a>\n                                    </DropdownItem>\n                                    <DropdownItem>\n                                        <a href=\"https://github.com/g3rv4/Traducir/blob/master/docs/USING_REDASH.md\" className=\"dropdown-item\" target=\"_blank\">Instructions</a>\n                                    </DropdownItem>\n                                </DropdownMenu>\n                            </UncontrolledDropdown>\n                            {this.state.user &&\n                                <NavItem>\n                                    <Link to=\"/users\" className=\"nav-link\">Users</Link>\n                                </NavItem>\n                            }\n                            {this.renderLogInLogOut()}\n                        </Nav>\n                    </Collapse>\n                </div>\n            </Navbar>\n            <div className=\"container\">\n                <Switch>\n                    <Route\n                        path=\"/users\"\n                        exact\n                        render={p =>\n                            this.state.config ?\n                                <Users\n                                    showErrorMessage={this.showErrorMessage}\n                                    currentUser={this.state.user}\n                                    config={this.state.config}\n                                /> :\n                                null\n                        }\n                    />\n                    <Route\n                        render={p => <>\n                            <Filters\n                                onResultsFetched={this.resultsReceived}\n                                onLoading={() => this.setState({ isLoading: true })}\n                                showErrorMessage={this.showErrorMessage}\n                                location={p.location}\n                            />\n                            <Switch>\n                                <Route\n                                    path=\"/\"\n                                    exact\n                                    render={q =>\n                                        this.state.stats ?\n                                            <StatsWithLinks stats={this.state.stats} /> :\n                                            null\n                                    }\n                                />\n                                {this.state.strings.length === 0 &&\n                                    <Route\n                                        path=\"/string/\"\n                                        render={q =>\n                                            this.state.stats ?\n                                                <StatsWithLinks stats={this.state.stats} /> :\n                                                null\n                                        }\n                                    />}\n                                <Route\n                                    render={q =>\n                                        <Results\n                                            results={this.state.strings}\n                                            loadSuggestions={this.loadSuggestions}\n                                            isLoading={this.state.isLoading}\n                                        />\n                                    }\n                                />\n                            </Switch>\n                        </>}\n                    />\n                </Switch>\n                <Modal isOpen={this.isOpen()} toggle={this.onToggle} className=\"w-95 mw-100\">\n                    <ModalHeader toggle={this.onToggle}>Suggestions</ModalHeader>\n                    <ModalBody>\n                        {this.state.currentString && this.state.config &&\n                            <Suggestions\n                                config={this.state.config}\n                                user={this.state.user}\n                                str={this.state.currentString}\n                                refreshString={this.refreshString}\n                                showErrorMessage={this.showErrorMessage}\n                            />}\n                    </ModalBody>\n                </Modal>\n            </div>\n        </>;\n    }\n}\n\nexport default withRouter(Traducir);\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Router } from \"react-router-dom\";\n\nimport Traducir from \"./App/Traducir\";\nimport history from \"./history\";\n\nReactDOM.render(\n  <Router history={history}>\n    <Traducir />\n  </Router>,\n  document.getElementById(\"root\")\n);\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import axios, { AxiosError } from \"axios\";\nimport * as React from \"react\";\nimport history from \"../../history\";\nimport IConfig from \"../../Models/Config\";\nimport IUser from \"../../Models/User\";\nimport IUserInfo from \"../../Models/UserInfo\";\nimport { UserType, userTypeToString } from \"../../Models/UserType\";\n\nexport interface IUsersProps {\n    showErrorMessage: (messageOrCode: string | number) => void;\n    currentUser?: IUserInfo;\n    config: IConfig;\n}\n\ninterface IUsersState {\n    users: IUser[];\n}\n\nexport default class Users extends React.Component<IUsersProps, IUsersState> {\n    constructor(props: IUsersProps) {\n        super(props);\n\n        this.state = {\n            users: []\n        };\n    }\n\n    public componentDidMount() {\n        this.refreshUsers();\n    }\n\n    public async refreshUsers() {\n        try {\n            const r = await axios.get<IUser[]>(\"/app/api/users\");\n            this.setState({\n                users: r.data\n            });\n        } catch (e) {\n            if (e.response.status === 401) {\n                history.push(\"/\");\n            } else {\n                this.props.showErrorMessage(e.response.status);\n            }\n        }\n    }\n\n    public async updateUserType(user: IUser, newType: UserType) {\n        try {\n            await axios.put(\"/app/api/users/change-type\", {\n                UserId: user.id,\n                UserType: newType\n            });\n            this.refreshUsers();\n        } catch (e) {\n            if (e.response.status === 400) {\n                this.props.showErrorMessage(\"Error updating user type\");\n            } else {\n                this.props.showErrorMessage(e.response.status);\n            }\n        }\n    }\n\n    public render() {\n        return <>\n            <div className=\"m-2 text-center\">\n                <h2>Users</h2>\n            </div>\n            <table className=\"table\">\n                <thead className=\"thead-light\">\n                    <tr>\n                        <th>User</th>\n                        <th>Role</th>\n                        <th>&nbsp;</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.state.users.map(u =>\n                        <tr key={u.id}>\n                            <td>\n                                <a href={`https://${this.props.config.siteDomain}/users/${u.id}`} target=\"_blank\">\n                                    {u.displayName} {u.isModerator ? \"♦\" : \"\"}\n                                </a>\n                            </td>\n                            <td>{userTypeToString(u.userType)}</td>\n                            <td>{this.props.currentUser && this.props.currentUser.canManageUsers &&\n                                <div className=\"btn-group\" role=\"group\">\n                                    {u.userType === UserType.User &&\n                                        <button type=\"button\" className=\"btn btn-sm btn-warning\" onClick={e => this.updateUserType(u, UserType.TrustedUser)}>\n                                            Make trusted user\n                                        </button>\n                                    }\n                                    {u.userType === UserType.Banned &&\n                                        <button type=\"button\" className=\"btn btn-sm btn-warning\" onClick={e => this.updateUserType(u, UserType.User)}>\n                                            Lift Ban\n                                        </button>\n                                    }\n                                    {u.userType === UserType.TrustedUser &&\n                                        <button type=\"button\" className=\"btn btn-sm btn-danger\" onClick={e => this.updateUserType(u, UserType.User)}>\n                                            Make regular user\n                                        </button>\n                                    }\n                                    {u.userType !== UserType.Banned && u.userType !== UserType.TrustedUser && u.userType !== UserType.Reviewer && !u.isModerator &&\n                                        <button type=\"button\" className=\"btn btn-sm btn-danger\" onClick={e => this.updateUserType(u, UserType.Banned)}>\n                                            Ban User\n                                        </button>\n                                    }\n                                </div>\n                            }</td>\n                        </tr>)}\n                </tbody>\n            </table>\n        </>;\n    }\n}\n","import axios, { AxiosError } from \"axios\";\nimport * as React from \"react\";\nimport history from \"../../history\";\nimport IConfig from \"../../Models/Config\";\nimport ISOStringSuggestion, { StringSuggestionState } from \"../../Models/SOStringSuggestion\";\nimport IUserInfo from \"../../Models/UserInfo\";\nimport { UserType } from \"../../Models/UserType\";\n\nexport interface ISuggestionsTableProps {\n    suggestions: ISOStringSuggestion[];\n    config: IConfig;\n    user?: IUserInfo;\n    refreshString: (stringIdToUpdate: number) => void;\n    showErrorMessage: (messageOrCode: string | number) => void;\n}\n\ninterface ISuggestionsTableState {\n    isButtonDisabled?: boolean;\n}\n\nenum ReviewAction {\n    Accept = 1,\n    Reject = 2\n}\n\nexport default class SuggestionsTable extends React.Component<ISuggestionsTableProps, ISuggestionsTableState> {\n    constructor(props: ISuggestionsTableProps) {\n        super(props);\n        this.state = {\n            isButtonDisabled: false\n        };\n    }\n\n    public render(): JSX.Element | null {\n        if (!this.props.suggestions || !this.props.suggestions.length) {\n            return null;\n        }\n\n        return <table className=\"table mt-2\">\n            <thead>\n                <tr>\n                    <th>Suggestion</th>\n                    <th>Approved By</th>\n                    <th>Created by</th>\n                    <th />\n                    <th />\n                </tr>\n            </thead>\n            <tbody>\n                {this.props.suggestions.map(sug =>\n                    <tr key={sug.id} className={sug.state === StringSuggestionState.ApprovedByTrustedUser ? \"table-success\" : \"\"}>\n                        <td><pre>{sug.suggestion}</pre></td>\n                        <td>{sug.lastStateUpdatedByName &&\n                            <a\n                                href={`https://${this.props.config.siteDomain}/users/${sug.lastStateUpdatedById}`}\n                                target=\"_blank\"\n                            >\n                                {sug.lastStateUpdatedByName}\n                            </a>\n                        }</td>\n                        <td>\n                            <a\n                                href={`https://${this.props.config.siteDomain}/users/${sug.createdById}`}\n                                target=\"_blank\"\n                                title={`at ${sug.creationDate} UTC`}\n                            >\n                                {sug.createdByName}\n                            </a>\n                        </td>\n                        <td>{this.renderDeleteButton(sug)}</td>\n                        <td>{this.renderSuggestionActions(sug)}</td>\n                    </tr>)}\n            </tbody>\n        </table>;\n    }\n\n    public renderSuggestionActions(sug: ISOStringSuggestion): JSX.Element | null {\n        if (!this.props.user || !this.props.user.canReview) {\n            return null;\n        }\n\n        if (sug.state === StringSuggestionState.ApprovedByTrustedUser &&\n            this.props.user.userType === UserType.TrustedUser) {\n            // a trusted user can't act on a suggestion approved by a trusted user\n            return null;\n        }\n\n        return <div className=\"btn-group\" role=\"group\">\n            <button type=\"button\" className=\"btn btn-sm btn-success\" onClick={e => this.processReview(sug, ReviewAction.Accept)} disabled={this.state.isButtonDisabled}>\n                <i className=\"fas fa-thumbs-up\" />\n            </button>\n            <button type=\"button\" className=\"btn btn-sm btn-danger\" onClick={e => this.processReview(sug, ReviewAction.Reject)} disabled={this.state.isButtonDisabled}>\n                <i className=\"fas fa-thumbs-down\" />\n            </button>\n        </div>;\n    }\n\n    public async processReview(sug: ISOStringSuggestion, action: ReviewAction) {\n        this.setState({\n            isButtonDisabled: true\n        });\n        try {\n            await axios.put(\"/app/api/review\", {\n                Approve: action === ReviewAction.Accept,\n                SuggestionId: sug.id\n            });\n            this.props.refreshString(sug.stringId);\n            history.push(\"/filters\");\n        } catch (e) {\n            if (e.response.status === 400) {\n                this.props.showErrorMessage(\"Error reviewing the suggestion. Do you have enough rights?\");\n            } else {\n                this.props.showErrorMessage(e.response.status);\n            }\n            this.setState({\n                isButtonDisabled: false\n            });\n        }\n    }\n\n    public renderDeleteButton(sug: ISOStringSuggestion): JSX.Element | null {\n        if (!this.props.user || sug.createdById !== this.props.user.id) {\n            return null;\n        }\n        return <button type=\"button\" className=\"btn btn-sm btn-danger\" onClick={e => this.processDeleteReview(sug)} disabled={this.state.isButtonDisabled}>\n            DELETE\n        </button>;\n    }\n\n    public async processDeleteReview(sug: ISOStringSuggestion) {\n        this.setState({\n            isButtonDisabled: true\n        });\n        try {\n            await axios.delete(`/app/api/suggestions/${sug.id}`);\n            this.props.refreshString(sug.stringId);\n            this.setState({\n                isButtonDisabled: false\n            });\n        } catch (e) {\n            if (e.response.status === 400) {\n                this.props.showErrorMessage(\"Error deleting the suggestion. Do you have enough rights?\");\n            } else {\n                this.props.showErrorMessage(e.response.status);\n            }\n            this.setState({\n                isButtonDisabled: false\n            });\n        }\n    }\n}\n","import axios, { AxiosError } from \"axios\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport history from \"../../history\";\nimport IConfig from \"../../Models/Config\";\nimport ISOString from \"../../Models/SOString\";\nimport IUserInfo from \"../../Models/UserInfo\";\nimport SuggestionNew from \"./SuggestionNew\";\nimport SuggestionsTable from \"./SuggestionsTable\";\n\nexport interface ISuggestionsProps {\n    user?: IUserInfo;\n    str: ISOString;\n    config: IConfig;\n    refreshString: (stringIdToUpdate: number) => void;\n    showErrorMessage: (messageOrCode: string | number) => void;\n}\n\nexport interface ISuggestionsState {\n    rawString: boolean;\n}\n\nexport default class Suggestions extends React.Component<ISuggestionsProps, ISuggestionsState> {\n    constructor(props: ISuggestionsProps) {\n        super(props);\n\n        this.state = {\n            rawString: false\n        };\n\n        this.onCheckboxChange = this.onCheckboxChange.bind(this);\n    }\n\n    public async updateUrgency(isUrgent: boolean) {\n        try {\n            await axios.put(\"/app/api/manage-urgency\", {\n                IsUrgent: isUrgent,\n                StringId: this.props.str.id\n            });\n            if (this.props.str) {\n                this.props.refreshString(this.props.str.id);\n            }\n            history.push(\"/filters\");\n        } catch (e) {\n            if (e.response.status === 400) {\n                this.props.showErrorMessage(\"Failed updating the urgency... maybe a race condition?\");\n            } else {\n                this.props.showErrorMessage(e.response.status);\n            }\n        }\n    }\n\n    public renderUrgency() {\n        if (!this.props.user || !this.props.user.canSuggest) {\n            return <span>{this.props.str.isUrgent ? \"Yes\" : \"No\"}</span>;\n        }\n        return this.props.str.isUrgent\n            ? <span>Yes <a href=\"#\" className=\"btn btn-sm btn-warning\" onClick={e => this.updateUrgency(false)}>Mark as non urgent</a></span>\n            : <span>No <a href=\"#\" className=\"btn btn-sm btn-danger\" onClick={e => this.updateUrgency(true)}>Mark as urgent</a></span>;\n    }\n\n    public onCheckboxChange() {\n        this.setState({ rawString: !this.state.rawString });\n    }\n\n    public render() {\n        return <>\n            <div>\n                <span className=\"font-weight-bold\">Key: </span>\n                <a href={`https://www.transifex.com/${this.props.config.transifexPath}/$?q=key%3A${this.props.str.key}`} target=\"_blank\">{this.props.str.key}</a>\n            </div>\n            <div>\n                <span className=\"font-weight-bold\">This string needs a new translation ASAP: </span> {this.renderUrgency()}\n            </div>\n            {this.props.user && this.props.user.canReview && <div>\n                <span className=\"font-weight-bold\">Raw string?: </span> <input type=\"checkbox\" checked={this.state.rawString} onChange={this.onCheckboxChange} />\n            </div>}\n            <div>\n                <span className=\"font-weight-bold\">Original String:</span> <pre className=\"d-inline\">{this.props.str.originalString}</pre>\n            </div>\n            {this.props.str.variant && <div>\n                <span className=\"font-weight-bold\">Variant:</span> {this.props.str.variant.replace(\"VARIANT: \", \"\")}\n            </div>}\n            <div>\n                <span className=\"font-weight-bold\">Current Translation:</span> {this.props.str.translation ?\n                    <pre className=\"d-inline\">{this.props.str.translation}</pre> :\n                    <i>Missing translation</i>}\n            </div>\n            <SuggestionsTable\n                user={this.props.user}\n                config={this.props.config}\n                suggestions={this.props.str.suggestions}\n                refreshString={this.props.refreshString}\n                showErrorMessage={this.props.showErrorMessage}\n            />\n\n            <SuggestionNew\n                user={this.props.user}\n                stringId={this.props.str.id}\n                rawString={this.state.rawString}\n                refreshString={this.props.refreshString}\n                showErrorMessage={this.props.showErrorMessage}\n            />\n        </>;\n    }\n}\n","import axios, { AxiosError } from \"axios\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport history from \"../../history\";\nimport { StringSuggestionState } from \"../../Models/SOStringSuggestion\";\nimport IUserInfo from \"../../Models/UserInfo\";\nimport { UserType } from \"../../Models/UserType\";\n\nexport interface ISuggestionNewProps {\n    user?: IUserInfo;\n    stringId: number;\n    rawString: boolean;\n    refreshString: (stringIdToUpdate: number) => void;\n    showErrorMessage: (messageOrCode: string | number) => void;\n}\n\ninterface ISuggestionNewState {\n    suggestion: string;\n}\n\nenum SuggestionCreationResult {\n    CreationOk = 1,\n    InvalidStringId = 2,\n    SuggestionEqualsOriginal = 3,\n    EmptySuggestion = 4,\n    SuggestionAlreadyThere = 5,\n    TooFewVariables = 6,\n    TooManyVariables = 7,\n    DatabaseError = 8\n}\n\nexport default class SuggestionNew extends React.Component<ISuggestionNewProps, ISuggestionNewState> {\n    constructor(props: ISuggestionNewProps) {\n        super(props);\n\n        this.state = {\n            suggestion: \"\"\n        };\n    }\n\n    public async postSuggestion(approve: boolean) {\n        try {\n            await axios.put(\"/app/api/suggestions\", {\n                Approve: approve,\n                RawString: this.props.rawString,\n                StringId: this.props.stringId,\n                Suggestion: this.state.suggestion\n            });\n            this.props.refreshString(this.props.stringId);\n            history.push(\"/filters\");\n        } catch (e) {\n            if (e.response.status === 400) {\n                switch (e.response.data) {\n                    case SuggestionCreationResult.DatabaseError:\n                        this.props.showErrorMessage(\"A database error has ocurred, please try again.\");\n                        break;\n                    case SuggestionCreationResult.EmptySuggestion:\n                        this.props.showErrorMessage(\"You send an empty suggestion, please try to send a suggestion next time\");\n                        break;\n                    case SuggestionCreationResult.InvalidStringId:\n                        this.props.showErrorMessage(\"We couldn't find the id you send, did you need to refresh your page?\");\n                        break;\n                    case SuggestionCreationResult.TooFewVariables:\n                        this.props.showErrorMessage(\"Failed sending the suggestion. You are missing some variables\");\n                        break;\n                    case SuggestionCreationResult.TooManyVariables:\n                        this.props.showErrorMessage(\"Failed sending the suggestion. You have included unrecognized variables\");\n                        break;\n                    case SuggestionCreationResult.SuggestionAlreadyThere:\n                        this.props.showErrorMessage(\"The suggestion you are sending is already suggested. Maybe you need to refresh?\");\n                        break;\n                    case SuggestionCreationResult.SuggestionEqualsOriginal:\n                        this.props.showErrorMessage(\"The suggestion you are sending is the same as the actual translation\");\n                        break;\n                    default:\n                        this.props.showErrorMessage(\"The server encountered an error, but we don't know what happened\");\n                        break;\n                }\n            } else {\n                this.props.showErrorMessage(e.response.status);\n            }\n        }\n    }\n\n    public render(): JSX.Element | null {\n        if (!this.props.user || !this.props.user.canSuggest) {\n            return null;\n        }\n        return <form>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"suggestion\" className=\"font-weight-bold\">New Suggestion</label>\n                        <textarea\n                            className=\"form-control\"\n                            id=\"suggestion\"\n                            value={this.state.suggestion}\n                            onChange={e => this.setState({ suggestion: e.target.value })}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div>\n                <div className=\"mt-1\">\n                    <div className=\"btn-group\" role=\"group\">\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-primary float-left\"\n                            onClick={e => this.postSuggestion(false)}\n                        >\n                            Send new suggestion\n                        </button>\n                        {this.props.user.userType >= UserType.Reviewer &&\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-warning float-left\"\n                                onClick={e => this.postSuggestion(true)}\n                            >\n                                Send final translation\n                            </button>}\n                    </div>\n                </div>\n            </div>\n        </form>;\n    }\n}\n","import * as _ from \"lodash\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport history from \"../../history\";\nimport ISOString from \"../../Models/SOString\";\nimport { StringSuggestionState } from \"../../Models/SOStringSuggestion\";\n\nexport interface IResultsProps {\n    results: ISOString[];\n    isLoading: boolean;\n    loadSuggestions: (str: ISOString) => void;\n}\n\nexport default class Results extends React.Component<IResultsProps> {\n    constructor(props: IResultsProps) {\n        super(props);\n    }\n\n    public renderSuggestions(str: ISOString): React.ReactFragment | null {\n        if (!str.suggestions || !str.suggestions.length) {\n            return null;\n        }\n\n        const approved = _.filter(str.suggestions, s => s.state === StringSuggestionState.ApprovedByTrustedUser).length;\n        const pending = _.filter(str.suggestions, s => s.state === StringSuggestionState.Created).length;\n\n        return <>\n            {approved > 0 && <span className=\"text-success\">{approved}</span>}\n            {approved > 0 && pending > 0 && <span> - </span>}\n            {pending > 0 && <span className=\"text-danger\">{pending}</span>}\n        </>;\n    }\n\n    public goToString(str: ISOString) {\n        this.props.loadSuggestions(str);\n        history.push(`/string/${str.id}`);\n    }\n\n    public renderRows(strings: ISOString[]): React.ReactFragment {\n        if (this.props.isLoading) {\n            return <tr>\n                <td colSpan={3} className=\"text-center\">Loading...</td>\n            </tr>;\n        }\n        if (strings.length === 0) {\n            return <tr>\n                <td colSpan={3} className=\"text-center\">No results (sad trombone)</td>\n            </tr>;\n        }\n        return <>\n            {strings.map(str => <tr\n                key={str.id}\n                onClick={e => this.goToString(str)}\n                className={str.isUrgent ? \"table-danger\" : str.touched ? \"table-success\" : \"\"}\n            >\n                <td>{str.originalString}</td>\n                <td>{str.translation}</td>\n                <td>{this.renderSuggestions(str)}</td>\n            </tr>)}\n        </>;\n    }\n\n    public render() {\n        return <>\n            <div className=\"m-2 text-center\">\n                <h2>Results {this.props.results &&\n                    this.props.results.length > 0 &&\n                    !this.props.isLoading &&\n                    `(${this.props.results.length})`}</h2>\n            </div>\n            <table className=\"table\">\n                <thead className=\"thead-light\">\n                    <tr>\n                        <th>String</th>\n                        <th>Translation</th>\n                        <th>Suggestions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {this.renderRows(this.props.results)}\n                </tbody>\n            </table>\n        </>;\n    }\n}\n","import { UserType } from \"./UserType\";\n\nexport default interface IUserInfo {\n    name: string;\n    userType: UserType;\n    canSuggest: boolean;\n    canReview: boolean;\n    canManageUsers: boolean;\n    id: number;\n}\n\nexport function userTypeToString(userType: UserType) {\n    switch (userType) {\n        case UserType.Banned:\n            return \"Banned\";\n        case UserType.User:\n            return \"User\";\n        case UserType.TrustedUser:\n            return \"Trusted User\";\n        case UserType.Reviewer:\n            return \"Reviewer\";\n    }\n}\n","export default interface ISOStringSuggestion {\n    id: number;\n    stringId: number;\n    suggestion: string;\n    state: StringSuggestionState;\n    createdById: number;\n    createdByName: string;\n    creationDate: string;\n    lastStateUpdatedById: number;\n    lastStateUpdatedByName: string;\n}\n\nexport enum StringSuggestionState {\n    Created = 1,\n    ApprovedByTrustedUser = 2,\n    ApprovedByReviewer = 3,\n    Rejected = 4,\n    DeletedByOwner = 5,\n    DismissedByOtherString = 6\n}\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport IStats from \"../../Models/Stats\";\n\nexport interface IStatsWithLinksProps {\n    stats: IStats;\n}\n\nexport default class StatsWithLinks extends React.Component<IStatsWithLinksProps> {\n    public render() {\n        return <div className=\"row text-center\">\n            <div className=\"col d-none d-lg-block\">\n                <div className=\"btn-group\" role=\"group\" aria-label=\"Basic example\">\n                    <button type=\"button\" className=\"btn btn-outline-secondary\" disabled>{this.props.stats.totalStrings} total strings</button>\n                    {this.props.stats.urgentStrings > 0 &&\n                        <Link to=\"/filters?urgencyStatus=1\" className=\"btn btn-danger\">{this.props.stats.urgentStrings} marked as urgent</Link>\n                    }\n                    <Link to=\"/filters?translationStatus=2\" className=\"btn btn-outline-danger\">{this.props.stats.withoutTranslation} without translation</Link>\n                    <Link to=\"/filters?suggestionsStatus=3\" className=\"btn btn-outline-primary\">{this.props.stats.waitingApproval} suggestions awaiting approval</Link>\n                    <Link to=\"/filters?suggestionsStatus=4\" className=\"btn btn-outline-success\">{this.props.stats.waitingReview} approved suggestions awaiting review</Link>\n                </div>\n            </div>\n            <div className=\"col d-lg-none\">\n                <div className=\"btn-group-vertical\" role=\"group\" aria-label=\"Basic example\">\n                    <button type=\"button\" className=\"btn btn-outline-secondary\" disabled>{this.props.stats.totalStrings} total strings</button>\n                    {this.props.stats.urgentStrings > 0 &&\n                        <Link to=\"/filters?urgencyStatus=1\" className=\"btn btn-danger\">{this.props.stats.urgentStrings} marked as urgent</Link>\n                    }\n                    <Link to=\"/filters?translationStatus=2\" className=\"btn btn-outline-danger\">{this.props.stats.withoutTranslation} without translation</Link>\n                    <Link to=\"/filters?suggestionsStatus=3\" className=\"btn btn-outline-primary\">{this.props.stats.waitingApproval} suggestions awaiting approval</Link>\n                    <Link to=\"/filters?suggestionsStatus=4\" className=\"btn btn-outline-success\">{this.props.stats.waitingReview} approved suggestions awaiting review</Link>\n                </div>\n            </div>\n        </div>;\n    }\n}\n","import axios from \"axios\";\nimport { Location } from \"history\";\nimport * as _ from \"lodash\";\nimport { parse, stringify } from \"query-string\";\nimport * as React from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport history from \"../../history\";\n\nimport ISOString from \"./../../Models/SOString\";\n\ninterface IFiltersState {\n    sourceRegex?: string;\n    translationRegex?: string;\n    key?: string;\n    translationStatus?: TranslationStatus;\n    suggestionsStatus?: SuggestionsStatus;\n    pushStatus?: PushStatus;\n    urgencyStatus?: UrgencyStatus;\n    hasError?: boolean;\n}\n\nexport interface IFiltersProps {\n    onResultsFetched: (strings: ISOString[]) => void;\n    onLoading: () => void;\n    showErrorMessage: (messageOrCode: string | number) => void;\n    location: Location;\n}\n\nenum SuggestionsStatus {\n    AnyStatus = 0,\n    DoesNotHaveSuggestions = 1,\n    HasSuggestionsNeedingReview = 2,\n    HasSuggestionsNeedingApproval = 3,\n    HasSuggestionsNeedingReviewApprovedByTrustedUser = 4\n}\n\nenum TranslationStatus {\n    AnyStatus = 0,\n    WithTranslation = 1,\n    WithoutTranslation = 2\n}\n\nenum PushStatus {\n    AnyStatus = 0,\n    NeedsPush = 1,\n    DoesNotNeedPush = 2\n}\n\nenum UrgencyStatus {\n    AnyStatus = 0,\n    IsUrgent = 1,\n    IsNotUrgent = 2\n}\n\nexport default class Filters extends React.Component<IFiltersProps, IFiltersState> {\n    public submitForm = _.debounce(async () => {\n        this.props.onLoading();\n\n        try {\n            const response = await axios.post<ISOString[]>(\"/app/api/strings/query\", this.state);\n            this.setState({ hasError: false });\n            this.props.onResultsFetched(response.data);\n\n        } catch (error) {\n            if (error.response.status === 400) {\n                this.setState({ hasError: true });\n                this.props.onResultsFetched([]);\n            } else {\n                this.props.showErrorMessage(error.response.status);\n            }\n        }\n\n    }, 1000);\n\n    constructor(props: IFiltersProps) {\n        super(props);\n        this.state = this.getStateFromLocation(this.props.location);\n        if (!this.hasFilter() && !props.location.pathname.startsWith(\"/string\")) {\n            history.replace(\"/\");\n            return;\n        }\n    }\n\n    public hasFilter() {\n        return this.state.sourceRegex ||\n            this.state.translationRegex ||\n            this.state.key ||\n            this.state.translationStatus ||\n            this.state.suggestionsStatus ||\n            this.state.pushStatus ||\n            this.state.urgencyStatus;\n    }\n\n    public componentDidMount() {\n        if (this.hasFilter()) {\n            this.submitForm();\n        }\n    }\n\n    public componentWillReceiveProps(nextProps: IFiltersProps, context: any) {\n        if (nextProps.location.pathname === \"/filters\" &&\n            !nextProps.location.search &&\n            !this.hasFilter()) {\n            history.replace(\"/\");\n            return;\n        }\n        if (this.props.location.search === nextProps.location.search ||\n            this.props.location.pathname === \"/filters\") {\n            return;\n        }\n\n        this.setState(this.getStateFromLocation(nextProps.location), () => {\n            if (!this.hasFilter() && !nextProps.location.pathname.startsWith(\"/string\")) {\n                history.replace(\"/\");\n                return;\n            }\n            this.submitForm();\n        });\n    }\n\n    public getStateFromLocation(location: Location) {\n        this.props.onLoading();\n        const parts: IFiltersState = parse(location.search);\n        return {\n            key: parts.key || \"\",\n            pushStatus: parts.pushStatus || PushStatus.AnyStatus,\n            sourceRegex: parts.sourceRegex || \"\",\n            suggestionsStatus: parts.suggestionsStatus || SuggestionsStatus.AnyStatus,\n            translationRegex: parts.translationRegex || \"\",\n            translationStatus: parts.translationStatus || TranslationStatus.AnyStatus,\n            urgencyStatus: parts.urgencyStatus || UrgencyStatus.AnyStatus\n        };\n    }\n\n    public handleField(updatedState: IFiltersState) {\n        this.setState({ ...updatedState, hasError: false }, () => {\n            if (!this.hasFilter()) {\n                history.replace(\"/\");\n                return;\n            }\n            this.submitForm();\n\n            const newPath = `/filters?${this.currentPath()}`;\n            if (location.pathname.startsWith(\"/filters\")) {\n                history.replace(newPath);\n            } else {\n                history.push(newPath);\n            }\n        });\n    }\n\n    public reset() {\n        this.setState({\n            key: \"\",\n            pushStatus: PushStatus.AnyStatus,\n            sourceRegex: \"\",\n            suggestionsStatus: SuggestionsStatus.AnyStatus,\n            translationRegex: \"\",\n            translationStatus: TranslationStatus.AnyStatus,\n            urgencyStatus: UrgencyStatus.AnyStatus\n        }, () => {\n            this.props.onResultsFetched([]);\n        });\n    }\n\n    public currentPath() {\n        return stringify(_.pickBy(this.state, e => e));\n    }\n\n    public render() {\n        return <>\n            <div className=\"m-2 text-center\">\n                <h2>Filters</h2>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"sourceRegex\">Source Regex</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"sourceRegex\"\n                            placeholder=\"^question\"\n                            value={this.state.sourceRegex}\n                            onChange={e => this.handleField({ sourceRegex: e.target.value })}\n                        />\n                    </div>\n                </div>\n                <div className=\"col\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"translationRegex\">Translation Regex</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"translationRegex\"\n                            placeholder=\"(?i)pregunta$\"\n                            value={this.state.translationRegex}\n                            onChange={e => this.handleField({ translationRegex: e.target.value })}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"withoutTranslation\">Strings without translation</label>\n                        <select\n                            className=\"form-control\"\n                            id=\"withoutTranslation\"\n                            value={this.state.translationStatus}\n                            onChange={e => this.handleField({ translationStatus: parseInt(e.target.value, 10) })}\n                        >\n                            <option value={TranslationStatus.AnyStatus}>Any string</option>\n                            <option value={TranslationStatus.WithoutTranslation}>Only strings without translation</option>\n                            <option value={TranslationStatus.WithTranslation}>Only strings with translation</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"col\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"suggestionsStatus\">Strings with pending suggestions</label>\n                        <select\n                            className=\"form-control\"\n                            id=\"suggestionsStatus\"\n                            value={this.state.suggestionsStatus}\n                            onChange={e => this.handleField({ suggestionsStatus: parseInt(e.target.value, 10) })}\n                        >\n                            <option value={SuggestionsStatus.AnyStatus}>Any string</option>\n                            <option value={SuggestionsStatus.DoesNotHaveSuggestions}>Strings without suggestions</option>\n                            <option value={SuggestionsStatus.HasSuggestionsNeedingApproval}>Strings with suggestions awaiting approval</option>\n                            <option value={SuggestionsStatus.HasSuggestionsNeedingReview}>Strings with suggestions awaiting review</option>\n                            <option value={SuggestionsStatus.HasSuggestionsNeedingReviewApprovedByTrustedUser}>Strings with approved suggestions awaiting review</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"key\">Key</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            id=\"key\"\n                            value={this.state.key}\n                            onChange={e => this.handleField({ key: e.target.value })}\n                        />\n                    </div>\n                </div>\n                <div className=\"col\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"suggestionsStatus\">Strings with urgency status</label>\n                        <select\n                            className=\"form-control\"\n                            id=\"urgencyStatus\"\n                            value={this.state.urgencyStatus}\n                            onChange={e => this.handleField({ urgencyStatus: parseInt(e.target.value, 10) })}\n                        >\n                            <option value={UrgencyStatus.AnyStatus}>Any string</option>\n                            <option value={UrgencyStatus.IsUrgent}>Is urgent</option>\n                            <option value={UrgencyStatus.IsNotUrgent}>Is not urgent</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n            {this.state.hasError &&\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                            Error when performing the filter... are the regular expressions ok?\n                    </div>\n                    </div>\n                </div>\n            }\n            <div className=\"row text-center mb-5\">\n                <div className=\"col\">\n                    <Link to=\"/\" className=\"btn btn-secondary\" onClick={e => this.reset()}>Reset</Link>\n                </div>\n            </div>\n            {location.pathname === \"/filters\" && location.search === \"\" && this.hasFilter() &&\n                <Redirect\n                    to={{\n                        pathname: \"/filters\",\n                        search: this.currentPath()\n                    }}\n                />}\n        </>;\n    }\n}\n","export enum UserType {\n    Unknown = 0,\n    Banned = 1,\n    User = 2,\n    TrustedUser = 3,\n    Reviewer = 4\n}\n\nexport function userTypeToString(userType: UserType): string {\n    switch (userType) {\n        case UserType.Unknown:\n            return \"Unknown\";\n        case UserType.Banned:\n            return \"Banned\";\n        case UserType.User:\n            return \"User\";\n        case UserType.TrustedUser:\n            return \"Trusted User\";\n        case UserType.Reviewer:\n            return \"Reviewer\";\n    }\n}\n"],"sourceRoot":""}